#!/bin/bash
#
# Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
#
# Reset the iptables to open the firewall ports on the local VM
# Access to ports is controlled from OCI Security rules
# Added

sudo timedatectl set-timezone UTC

/opt/scripts/reset_iptables.sh

fileName=$(basename $BASH_SOURCE)


logs_dir=$(curl -H "Authorization: Bearer Oracle" -L http://169.254.169.254/opc/v2/instance/metadata/logs_dir)
mkdir -p ${logs_dir}
log_file="${logs_dir}/bootstrap.log"

function log() {
    while IFS= read -r line; do
        DATE=`date '+%Y-%m-%d %H:%M:%S.%N'`
        echo "<$DATE>  $line"
    done
}

# Pre-create provisioning log as oracle user so it is owned by oracle user.
# This is to avoid race-condition if logging happens from a script running as root user first then
# provisioning log is created and owned by root user. So we pre-create it before any logging happens
# to provisioning log file.
sudo su - oracle -c "touch ${logs_dir}/provisioning.log"

# Call bootstrap.py to wait for provisioning marker
# This file is already part of the image.

python /opt/scripts/bootstrap.py | log >> $log_file

# Bootstrap.py unpacks the scripts to /opt/scripts directory.
# Ensure they are owned by oracle user and the shell scripts have execute file permission.

sudo chown -R oracle:oracle /u01
sudo chmod -R 775 /u01/
sudo chown -R oracle:oracle /opt
sudo chmod -R 775 /opt/
sudo chmod +x /opt/scripts/*.sh


# Append to oracle home bashrc so DOMAIN_HOME is configured for oracle user - this is required for migration
WLS_DOMAIN_NAME=$(sudo su oracle -c 'python /opt/scripts/databag.py wls_domain_name')
WLS_DOMAIN_DIR=$(sudo su oracle -c 'python /opt/scripts/databag.py domain_dir')
DOMAIN_HOME=$WLS_DOMAIN_DIR"/"$WLS_DOMAIN_NAME
USE_FSS=$(sudo su oracle -c 'python /opt/scripts/databag.py use_fss')
FSS_MOUNT_IP=$(sudo su oracle -c 'python /opt/scripts/databag.py fss_mount_ip')
FSS_MOUNT_PATH=$(sudo su oracle -c 'python /opt/scripts/databag.py fss_mount_path')
FSS_EXPORT_PATH=$(sudo su oracle -c 'python /opt/scripts/databag.py fss_export_path')
SKIP_DOMAIN_CREATION=$(sudo su oracle -c 'python /opt/scripts/databag.py skip_domain_creation')

echo "export DOMAIN_HOME=${DOMAIN_HOME}" >> /home/oracle/.bashrc

python /opt/scripts/mountVolume.py | log >> $log_file
exit_code=$?
if [ $exit_code -ne 0 ]; then
    echo "Error executing volume mounting.. Exiting provisioning" | log >> $log_file
    #clean up script
    /opt/scripts/tidyup.sh
    exit 1
fi

uuid=`sudo lsblk -no UUID $(df -P /u01/data/lost+found | awk 'END{print $1}')`
sudo sed -i -e "\$aUUID=${uuid} /u01/data ext4 auto,defaults,_netdev,nofail 0 2" /etc/fstab

if [ $? -eq 0 ]; then
  echo "Added entry for /u01/data in /etc/fstab" | log >> $log_file
else
  echo "Failed to add /etc/fstab entry. Exiting" | log >> $log_file
  #clean up script
  /opt/scripts/tidyup.sh
  exit 1
fi
echo "Copying soa.service to systemd.." | log >> $log_file
sudo cp /opt/scripts/soa.service /usr/lib/systemd/system
echo "Creating symlink for soa.service" | log >> $log_file
sudo ln -s '/usr/lib/systemd/system/soa.service' '/etc/systemd/system/multi-user.target.wants/soa.service'
#sudo chmod +x /etc/rc.d/rc.local
#sudo echo "sudo su - oracle -c /opt/scripts/restart/restart_12c_servers.sh > /u01/logs/reboot_servers.log" >> /etc/rc.d/rc.local
#
#if [ $? -eq 0 ]; then
#  echo "Added entry for SOA Server restart in /etc/rc.d/rc.local" | log >> $log_file
#else
#  echo "Failed to add /etc/rc.d/rc.local entry. Exiting" | log >> $log_file
  #clean up script
#  /opt/scripts/tidyup.sh
#  exit 1
#fi

# Continue with initialization and append to the provisioning log both stdout and stderr

#check versions in prod version
echo "Executing check_versions script" | log >> $log_file

/opt/scripts/check_versions.sh
exit_code=$?

echo "Executed check_versions script with exit code [$exit_code]" | log >> $log_file

if [ $exit_code -eq 0 ]; then
    config_script="/opt/scripts/idcs/configure_test_idcs.sh"
    [[ -x ${config_script} ]] && ${config_script}
    rm -f ${config_script}

    echo "Executing terraform_init_idcs.sh" | log >> $log_file
    #Save stdout and stderr in variable and print it in case exit code is not zero
    terraform_init_log=$(su - oracle -c /opt/scripts/idcs/terraform_init_idcs.sh 2>&1)
    exit_code=$?
    echo "Executed terraform_init_idcs.sh with exit code [$exit_code]" | log >> $log_file
    [[ $exit_code -ne 0 ]] && echo "$terraform_init_log" | log >> $log_file
fi

if [ $exit_code -eq 0 ]; then
    echo "Executing install_cloudgate.sh" | log >> $log_file
    #Save stdout and stderr in variable and print it in case exit code is not zero
    install_clougate_log=$(/opt/scripts/idcs/install_cloudgate.sh 2>&1)
    exit_code=$?
    echo "Executed install_cloudgate.sh with exit code [$exit_code]" | log >> $log_file
    [[ $exit_code -ne 0 ]] && echo "$install_clougate_log" | log >> $log_file
fi

if [ $exit_code -eq 0 ]; then
  if [ $USE_FSS == 'true' ]; then
    echo "Executing FSS mount commands" | log >> $log_file
    /opt/scripts/fssMount.sh
    exit_code=$?

    if [ $exit_code -ne 0 ]; then
        echo "Error executing FSS mounting.. Exiting provisioning" | log >> $log_file
        #clean up script
        /opt/scripts/tidyup.sh
        exit 1
    fi
    sudo sed -i -e "\$a${FSS_MOUNT_IP}:${FSS_EXPORT_PATH} ${FSS_MOUNT_PATH} nfs defaults,nofail,nosuid,resvport 0 0" /etc/fstab

    if [ $? -eq 0 ]; then
      echo "Added entry for FSS in /etc/fstab" | log >> $log_file
    else
      echo "Failed to add FSS entry. Exiting" | log >> $log_file
      #clean up script
      /opt/scripts/tidyup.sh
      exit 1
    fi
    echo "Mounted FSS successfully" | log >> $log_file
  fi
fi


if [ $exit_code -eq 0 ]; then
  if [ $SKIP_DOMAIN_CREATION == 'false' ]; then
    echo "Executing terraform_init.sh" | log >> $log_file
    su - oracle -c /opt/scripts/terraform_init.sh
    exit_code=$?
    echo "Executed terraform_init.sh with exit code [$exit_code]" | log >> $log_file
  else
    echo "Domain creation disabled. Skipping terraform_init.sh script execution." | log >> $log_file
  fi
fi

echo "Executing cleanup script" | log >> $log_file

#clean up script
/opt/scripts/tidyup.sh

echo "Executed cleanup script" | log >> $log_file
